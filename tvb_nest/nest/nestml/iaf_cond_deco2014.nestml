# -*- coding: utf-8 -*-
/*
Name: iaf_cond_deco2014 - Conductance based leaky integrate-and-fire neuron model
                          with separate excitatory AMPA & NMDA, and inhibitory GABA synapses

Description:
iaf_cond_deco2014 is an implementation of a spiking neuron using IAF dynamics with
conductance-based synapses.

The spike is emitted when the membrane voltage V_m >= V_th,
in which case it is reset to V_reset, and kept there for refractory time t_ref.

The V_m dynamics is given by the following equations:

dV_m/dt = 1/C_m *( -g_m * (V_m - E_L)
                   -g_AMPA_ext * (V_m - E_ex))*SUM_i{s_AMPA_ext_i)  // input from external AMPA excitatory neurons
                   -g_AMPA * (V_m - E_ex))*s_AMPA          // input from recursive excitatory neurons
                   -g_NMDA / (1 + lambda_NMDA * exp(-beta*V_m)) * (V_m - E_ex))*s_NMDA // input from recursive excitatory neurons
                   -g_GABA * (V_m - E_in))*s_GABA // input from recursive inhibitory neurons

where
ds_(AMPA/GABA)/dt = -(1/tau_(AMPA/GABA)) * w_E/I * s_(AMPA/GABA) + w_E/I *SUM_j_in_E/I{SUM_k{delta(t-t_j_k}},
dx_NMDA/dt = -(1/tau_NMDA_rise) * w_E * x_NMDA + w_E * SUM_j_in_E{SUM_k{delta(t-t_k}},
where t_j_k is the time of kth spike emitted by jth neuron of the local excitatory (E) or inhibitory (I) population
ds_NMDA/dt =  -(1/tau_NMDA_decay) * s_NMDA + alpha * x_NMDA * (1 - s_NMDA)

Similarly:
ds_AMPA_ext_i/dt = -(1/tau_AMPA_ext) * w_E_ext_i * s_AMPA_ext_i + w_E_ext_i * SUM_j_in_E_ext_i{SUM_k{delta(t-t_j_k}},
where t_j_k is the time of kth spike emitted by jth neuron of the ith external excitatory (E) AMPA population

Therefore, port 0 is reserved for local population spikes, either with positive weight (w_E), or negative (w_I),
whereas external excitatory AMPA spikes from N external populations are received in ports > 0,
strictly with positive weights.

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

References:

[1] Ponce-Alvarez A., Mantini D., Deco G., Corbetta M., Hagmann P., & Romani G. L. (2014).
How Local Excitation-Inhibition Ratio Impacts the Whole Brain Dynamics. Journal of Neuroscience.
34(23), 7886-7898. https://doi.org/10.1523/jneurosci.5068-13.2014

[2] Meffin, H., Burkitt, A. N., & Grayden, D. B. (2004). An analytical
model for the large, fluctuating synaptic conductance state typical of
neocortical neurons in vivo. J.  Comput. Neurosci., 16, 159-175.

[3] Bernander, O., Douglas, R. J., Martin, K. A. C., & Koch, C. (1991).
Synaptic background activity influences spatiotemporal integration in
single pyramidal cells.  Proc. Natl. Acad. Sci. USA, 88(24),
11569-11573.

[4] Kuhn, Aertsen, Rotter (2004). Neuronal Integration of Synaptic Input in
the Fluctuation- Driven Regime. Jneurosci 24(10) 2345-2356

Author: Dionysios Perdikis

SeeAlso: iaf_cond_beta
*/
neuron iaf_cond_deco2014:

  state:
    r integer # counts number of tick during the refractory period
  end

  initial_values:
    s_AMPA_ext real = 0.0
    s_AMPA real = 0.0
    x_NMDA 1/ms = 0.01/ms
    s_GABA real = 0.0
    s_NMDA real = 0.0
    V_m mV = E_L # membrane potential
  end

  equations:

      # shape conv_AMPA_ext = nS * e * t * exp(-w_E_ext_tau_decay_AMPA*t)
      # shape conv_AMPA = nS * e * t * exp(-w_E_tau_decay_AMPA * t)
      # shape conv_GABA = nS * e * t * exp(-w_I_tau_rise_GABA_A * t)
      # shape conv_NMDA = nS * e * t * exp(-w_E_tau_rise_NMDA * t)

      # function s_AMPA_ext = convolve(conv_AMPA_ext, spikesExc_ext) / nS
      # function s_AMPA = convolve(conv_AMPA, spikesExc) / nS
      # function s_GABA = convolve(conv_GABA, spikesInh) / nS
      # function x_NMDA 1/ms = convolve(conv_NMDA, spikesExc) / nS / ms

      s_AMPA_ext' = - w_E_ext * s_AMPA_ext / tau_decay_AMPA
      s_AMPA' = - w_E * s_AMPA / tau_decay_AMPA
      s_GABA' = - w_I * s_GABA /tau_decay_GABA_A
      x_NMDA' = - w_E * x_NMDA / tau_rise_NMDA
      s_NMDA' = -s_NMDA / tau_decay_NMDA + alpha/kHz * x_NMDA * (1 - s_NMDA)

      function I_L pA = g_L * (V_m - E_L)
      function I_AMPA_ext pA = g_AMPA_ext * (V_m - E_ex) *  s_AMPA_ext
      function I_AMPA pA = g_AMPA * (V_m - E_ex) * s_AMPA
      function I_NMDA pA = g_NMDA/(1 + lambda_NMDA * exp(-beta * (V_m/1.0mV))) * (V_m - E_ex) * s_NMDA
      function I_GABA pA = g_GABA_A * (V_m - E_in) * s_GABA

      V_m' = (- I_L - I_AMPA_ext - I_AMPA - I_NMDA - I_GABA + I_e + currents) / C_m
  end

  parameters:
    V_th mV = -50.0mV            # Threshold
    V_reset mV = -55.0mV         # Reset value of the membrane potential
    E_L mV = -70.0mV             # Resting potential.
    E_ex mV = 0.0mV              # Excitatory reversal potential
    E_in mV = -70.0mV            # Inhibitory reversal potential
    t_ref ms = 2.0ms             # 1ms for Inh, Refractory period.
    tau_decay_AMPA ms = 2.0ms    # AMPA synapse decay time
    tau_rise_NMDA ms = 2.0ms     # NMDA synapse rise time
    tau_decay_NMDA ms = 100.0ms  # NMDA synapse decay time
    tau_decay_GABA_A ms = 10.0ms # GABA synapse decay time
    C_m pF = 500.0pF             # 200 for Inh, Capacity of the membrane
    g_L nS = 25.0nS              # 20nS for Inh, Membrane leak conductance
    g_AMPA_ext nS = 3.37nS       # 2.59nS for Inh, Membrane conductance for AMPA external excitatory currents
    g_AMPA nS = 0.065nS          # 0.051nS for Inh, Membrane conductance for AMPA recurrent excitatory currents
    g_NMDA nS = 0.20nS           # 0.16nS for Inh, Membrane conductance for NMDA recurrent excitatory currents
    g_GABA_A nS = 10.94nS        # 8.51nS for Inh, Membrane conductance for GABA recurrent inhibitory currents
    w_E real = 1.4               # Excitatory synapse weight, initialized as w_EE = 1.4, it should be set by the user as w_IE = 1.0
    w_I real = 1.0               # Inhibitory synapse weight, initialized as w_II = 1.0, it should be set by the user as w_EI
    w_E_ext real [n_receptors] = 0.1  # External excitatory synapses' weights' mean
    alpha kHz = 0.5kHz           #
    beta real = 0.062            #
    lambda_NMDA real = 0.28      #
    I_e pA = 0.0pA               # External current.
  end

  internals:
    RefractoryCounts integer = steps(t_ref) # refractory time in steps
  end

  input:
    spikesExc_ext[n_receptors] nS <- spike
    spikesExc nS <- excitatory spike
    spikesInh nS <- inhibitory spike
    currents <- current
  end

  output: spike

  update:
    integrate_odes()
    if r != 0: # neuron is absolute refractory
      r =  r - 1
      V_m = V_reset # clamp potential
    elif V_m >= V_th:  # neuron is not absolute refractory
      r = RefractoryCounts
      V_m = V_reset # clamp potential
      emit_spike()
    end
    s_AMPA_ext += spikesExc_ext/nS
    s_AMPA += spikesExc/nS
    x_NMDA += spikesExc/nS/ms
    s_GABA += spikesInh/nS
  end

end
